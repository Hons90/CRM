// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int              @id @default(autoincrement())
  name         String
  email        String           @unique
  passwordHash String
  role         String           @default("employee")
  revenueGoal  Decimal?         @default(0)
  createdAt    DateTime         @default(now())
  isDeleted    Boolean          @default(false)

  contacts     Contact[]        @relation("CreatedContacts")
  dialerPools  DialerPool[]     @relation("UploadedPools")
  sales        Sale[]
  appointments Appointment[]
  callLogs     CallLog[]
}

model Contact {
  id            Int                @id @default(autoincrement())
  type          String
  firstName     String?
  lastName      String?
  companyName   String?
  mobile        String
  email         String?
  notes         String?
  createdBy     Int?
  createdByUser User?              @relation("CreatedContacts", fields: [createdBy], references: [id])
  createdAt     DateTime           @default(now())
  isDeleted     Boolean            @default(false)

  documents     ContactDocument[]
  contactTags   ContactTag[]
  sales         Sale[]
  appointments  Appointment[]
}

model ContactDocument {
  id           Int      @id @default(autoincrement())
  contact      Contact  @relation(fields: [contactId], references: [id])
  contactId    Int
  documentType String?
  filePath     String
  uploadedAt   DateTime @default(now())
  isDeleted    Boolean  @default(false)
  uploadedBy   Int      // new field
}

model Tag {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  contactTags ContactTag[]
}

model ContactTag {
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     Int

  @@id([contactId, tagId])
}

model DialerPool {
  id         Int            @id @default(autoincrement())
  poolName   String
  uploadedBy Int?
  uploader   User?          @relation("UploadedPools", fields: [uploadedBy], references: [id])
  createdAt  DateTime       @default(now())
  isDeleted  Boolean        @default(false)
  filePath   String?
  numbers    DialerNumber[]
  callLogs   CallLog[]
}

model DialerNumber {
  id          Int         @id @default(autoincrement())
  pool        DialerPool  @relation(fields: [poolId], references: [id])
  poolId      Int
  phoneNumber String
  label       String?
  isCalled    Boolean     @default(false)
  isDeleted   Boolean     @default(false)
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  contact   Contact  @relation(fields: [contactId], references: [id])
  contactId Int
  amount    Decimal
  saleType  String
  saleDate  DateTime @default(now())
  notes     String?
}

model Appointment {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  contact     Contact  @relation(fields: [contactId], references: [id])
  contactId   Int
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      String   @default("pending")
  isDeleted   Boolean  @default(false)
}

model CallLog {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  phoneNumber String
  pool        DialerPool? @relation(fields: [poolId], references: [id])
  poolId      Int?
  status      String
  outcome     String?
  duration    Int
  callTime    DateTime    @default(now())
  notes       String?
}
